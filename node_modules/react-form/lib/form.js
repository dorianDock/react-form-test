'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormDefaultProps = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Form;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var noop = function noop() {};
var reop = function reop(d) {
  return d;
};

var FormDefaultProps = exports.FormDefaultProps = {
  loadState: noop,
  defaultValues: {},
  preValidate: reop,
  validate: function validate() {
    return null;
  },
  onValidationFail: noop,
  onChange: noop,
  saveState: noop,
  willUnmount: noop,
  preSubmit: reop,
  onSubmit: noop,
  postSubmit: noop
};

function Form() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return function (Comp) {
    return _react2.default.createClass({
      childContextTypes: {
        formAPI: _react2.default.PropTypes.object
      },
      getChildContext: function getChildContext() {
        return {
          formAPI: this.getAPI()
        };
      },

      // Lifecycle
      getDefaultProps: function getDefaultProps() {
        return Object.assign({}, FormDefaultProps, config);
      },
      getInitialState: function getInitialState() {
        var values = Object.assign({}, _utils2.default.clone(config.defaultValues), _utils2.default.clone(this.props.values));
        return this.props.loadState(this.props) || {
          values: values,
          touched: {},
          errors: this.validate(values),
          nestedErrors: {}
        };
      },
      componentWillMount: function componentWillMount() {
        this.emitChange(this.state, true);
      },
      componentWillReceiveProps: function componentWillReceiveProps(props) {
        if (props.values === this.props.values) {
          return;
        }

        this.setFormState({
          values: _utils2.default.clone(props.values) || {}
        }, true);
      },
      componentWillUnmount: function componentWillUnmount() {
        this.props.willUnmount(this.state, this.props);
      },


      // API
      setValue: function setValue(field, value, noTouch) {
        var state = this.state;
        var values = _utils2.default.set(state.values, field, value);
        // Also set touched since the value is changing
        if (noTouch) {
          return this.setFormState({ values: values });
        }
        var touched = _utils2.default.set(state.touched, field, value);
        this.setFormState({ values: values, touched: touched });
      },
      getValue: function getValue(field, fallback) {
        var state = this.state;
        var val = _utils2.default.get(state.values, field);
        return typeof val !== 'undefined' ? val : fallback;
      },
      setNestedError: function setNestedError(field) {
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var nestedErrors = _utils2.default.set(this.state.nestedErrors, field, value);
        this.setFormState({ nestedErrors: nestedErrors });
      },
      getError: function getError(field) {
        return _utils2.default.get(this.state.errors, field);
      },
      setTouched: function setTouched(field) {
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var touched = _utils2.default.set(this.state.touched, field, value);
        this.setFormState({ touched: touched });
      },
      getTouched: function getTouched(field) {
        var state = this.state;
        if (this.state.dirty === true || this.props.touched === true) {
          return true;
        }
        return _utils2.default.get(state.touched, field);
      },
      addValue: function addValue(field, value) {
        var state = this.state;
        var values = _utils2.default.set(state.values, field, [].concat(_toConsumableArray(_utils2.default.get(state.values, field, [])), [value]));
        this.setFormState({ values: values });
      },
      removeValue: function removeValue(field, index) {
        var state = this.state;
        var fieldValue = _utils2.default.get(state.values, field, []);
        var values = _utils2.default.set(state.values, field, [].concat(_toConsumableArray(fieldValue.slice(0, index)), _toConsumableArray(fieldValue.slice(index + 1))));
        this.setFormState({ values: values });
      },
      swapValues: function swapValues(field, index, destIndex) {
        var state = this.state;
        var fieldValues = _utils2.default.get(state.values, field, []);
        var values = _utils2.default.set(state.values, field, [].concat(_toConsumableArray(fieldValues.slice(0, index)), [fieldValues[destIndex]], _toConsumableArray(fieldValues.slice(index + 1, destIndex)), [fieldValues[index]], _toConsumableArray(fieldValues.slice(destIndex + 1))));
        this.setFormState({ values: values });
      },
      setAllTouched: function setAllTouched() {
        var dirty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        this.setFormState({ dirty: !!dirty });
      },
      submitForm: function submitForm(e) {
        e && e.preventDefault && e.preventDefault(e);
        var state = this.state;
        var errors = this.validate(state.values, state, this.props);
        if (errors) {
          if (!state.dirty) {
            this.setAllTouched();
          }
          return this.props.onValidationFail(state, this.props);
        }
        var preSubmitValues = this.props.preSubmit(state.values, state, this.props);
        this.props.onSubmit(preSubmitValues, state, this.props);
        this.props.postSubmit(preSubmitValues, state, this.props);
      },


      // Utils
      getAPI: function getAPI() {
        return {
          setValue: this.setValue,
          getValue: this.getValue,
          setNestedError: this.setNestedError,
          getError: this.getError,
          setTouched: this.setTouched,
          getTouched: this.getTouched,
          addValue: this.addValue,
          removeValue: this.removeValue,
          swapValues: this.swapValues,
          setAllTouched: this.setAllTouched,
          submitForm: this.submitForm
        };
      },
      setFormState: function setFormState(newState, silent) {
        var _this = this;

        if (newState && newState.values) {
          newState.values = this.props.preValidate(newState.values, newState, this.props);
          newState.errors = this.validate(newState.values, newState, this.props);
        }
        this.setState(newState, function () {
          _this.props.saveState(_this.state, _this.props);
          if (!silent) {
            _this.emitChange(_this.state, _this.props);
          }
        });
      },
      emitChange: function emitChange(state, initial) {
        this.props.onChange(state, this.props, initial);
      },
      validate: function validate(values) {
        var errors = this.props.validate(removeNestedErrorValues(values, this.state ? this.state.nestedErrors : {}));
        return cleanErrors(errors);
      },

      // Render
      render: function render() {
        var props = _extends({}, this.props, this.state, this.getAPI());
        return _react2.default.createElement(Comp, props);
      }
    });
  };
}

// Utils

function cleanErrors(err) {
  if (_utils2.default.isObject(err)) {
    var resolved = _utils2.default.mapValues(err, cleanErrors);
    var found = _utils2.default.pickBy(resolved, function (d) {
      return d;
    });
    return Object.keys(found).length ? resolved : undefined;
  }
  if (_utils2.default.isArray(err)) {
    var _resolved = err.map(cleanErrors);
    var _found = _resolved.find(function (d) {
      return d;
    });
    return _found ? _resolved : undefined;
  }
  return err;
}

function removeNestedErrorValues(value, nestedErrors) {
  var recurse = function recurse(value) {
    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    if (_utils2.default.get(nestedErrors, path)) {
      return undefined;
    }
    if (_utils2.default.isObject(value)) {
      return _utils2.default.mapValues(value, function (d, i) {
        return recurse(d, [].concat(_toConsumableArray(path), [i]));
      });
    }
    if (_utils2.default.isArray(value)) {
      return value.map(function (d, key) {
        return recurse(d, [].concat(_toConsumableArray(path), [key]));
      });
    }
    return value;
  };
  return recurse(value);
}
//# sourceMappingURL=data:application/json;base64,