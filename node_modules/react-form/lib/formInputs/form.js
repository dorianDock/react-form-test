'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = FormInputForm;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _formInput = require('../formInput');

var _formInput2 = _interopRequireDefault(_formInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
//


function FormInputForm(_ref) {
  var field = _ref.field,
      form = _ref.form,
      rest = _objectWithoutProperties(_ref, ['field', 'form']);

  var FormComponent = form;
  return _react2.default.createElement(
    _formInput2.default,
    {
      field: field,
      errorBefore: true,
      isForm: true
    },
    function (_ref2) {
      var setValue = _ref2.setValue,
          getValue = _ref2.getValue,
          getTouched = _ref2.getTouched,
          setNestedError = _ref2.setNestedError;

      return _react2.default.createElement(FormComponent, _extends({}, rest, {
        /* Let the parent form set defaultValues */
        values: getValue()
        /* Respond to the parent form's dirty submission attempts */
        , touched: getTouched()
        /* Notify the parent of any nestedForm-level errors and values */
        , onChange: function onChange(_ref3, props, initial) {
          var values = _ref3.values,
              errors = _ref3.errors;

          errors ? setNestedError(true) : setNestedError(false);
          setValue(values, initial);
        }
      }));
    }
  );
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb3JtSW5wdXRzL2Zvcm0uanMiXSwibmFtZXMiOlsiRm9ybUlucHV0Rm9ybSIsImZpZWxkIiwiZm9ybSIsInJlc3QiLCJGb3JtQ29tcG9uZW50Iiwic2V0VmFsdWUiLCJnZXRWYWx1ZSIsImdldFRvdWNoZWQiLCJzZXROZXN0ZWRFcnJvciIsInByb3BzIiwiaW5pdGlhbCIsInZhbHVlcyIsImVycm9ycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBSXdCQSxhOztBQUp4Qjs7OztBQUVBOzs7Ozs7O0FBREE7OztBQUdlLFNBQVNBLGFBQVQsT0FBZ0Q7QUFBQSxNQUF2QkMsS0FBdUIsUUFBdkJBLEtBQXVCO0FBQUEsTUFBaEJDLElBQWdCLFFBQWhCQSxJQUFnQjtBQUFBLE1BQVBDLElBQU87O0FBQzdELE1BQU1DLGdCQUFnQkYsSUFBdEI7QUFDQSxTQUNFO0FBQUE7QUFBQTtBQUNFLGFBQU9ELEtBRFQ7QUFFRSx1QkFGRjtBQUdFO0FBSEY7QUFLRyxxQkFBc0Q7QUFBQSxVQUFwREksUUFBb0QsU0FBcERBLFFBQW9EO0FBQUEsVUFBMUNDLFFBQTBDLFNBQTFDQSxRQUEwQztBQUFBLFVBQWhDQyxVQUFnQyxTQUFoQ0EsVUFBZ0M7QUFBQSxVQUFwQkMsY0FBb0IsU0FBcEJBLGNBQW9COztBQUNyRCxhQUNFLDhCQUFDLGFBQUQsZUFDTUwsSUFETjtBQUVFO0FBQ0EsZ0JBQVFHO0FBQ1I7QUFKRixVQUtFLFNBQVNDO0FBQ1Q7QUFORixVQU9FLFVBQVUseUJBQW1CRSxLQUFuQixFQUEwQkMsT0FBMUIsRUFBc0M7QUFBQSxjQUFwQ0MsTUFBb0MsU0FBcENBLE1BQW9DO0FBQUEsY0FBNUJDLE1BQTRCLFNBQTVCQSxNQUE0Qjs7QUFDOUNBLG1CQUFTSixlQUFlLElBQWYsQ0FBVCxHQUFnQ0EsZUFBZSxLQUFmLENBQWhDO0FBQ0FILG1CQUFTTSxNQUFULEVBQWlCRCxPQUFqQjtBQUNEO0FBVkgsU0FERjtBQWNEO0FBcEJILEdBREY7QUF3QkQiLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbi8vXG5pbXBvcnQgRm9ybUlucHV0IGZyb20gJy4uL2Zvcm1JbnB1dCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRm9ybUlucHV0Rm9ybSAoe2ZpZWxkLCBmb3JtLCAuLi5yZXN0fSkge1xuICBjb25zdCBGb3JtQ29tcG9uZW50ID0gZm9ybVxuICByZXR1cm4gKFxuICAgIDxGb3JtSW5wdXRcbiAgICAgIGZpZWxkPXtmaWVsZH1cbiAgICAgIGVycm9yQmVmb3JlXG4gICAgICBpc0Zvcm1cbiAgICA+XG4gICAgICB7KHtzZXRWYWx1ZSwgZ2V0VmFsdWUsIGdldFRvdWNoZWQsIHNldE5lc3RlZEVycm9yfSkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxGb3JtQ29tcG9uZW50XG4gICAgICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgICAgIC8qIExldCB0aGUgcGFyZW50IGZvcm0gc2V0IGRlZmF1bHRWYWx1ZXMgKi9cbiAgICAgICAgICAgIHZhbHVlcz17Z2V0VmFsdWUoKX1cbiAgICAgICAgICAgIC8qIFJlc3BvbmQgdG8gdGhlIHBhcmVudCBmb3JtJ3MgZGlydHkgc3VibWlzc2lvbiBhdHRlbXB0cyAqL1xuICAgICAgICAgICAgdG91Y2hlZD17Z2V0VG91Y2hlZCgpfVxuICAgICAgICAgICAgLyogTm90aWZ5IHRoZSBwYXJlbnQgb2YgYW55IG5lc3RlZEZvcm0tbGV2ZWwgZXJyb3JzIGFuZCB2YWx1ZXMgKi9cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoe3ZhbHVlcywgZXJyb3JzfSwgcHJvcHMsIGluaXRpYWwpID0+IHtcbiAgICAgICAgICAgICAgZXJyb3JzID8gc2V0TmVzdGVkRXJyb3IodHJ1ZSkgOiBzZXROZXN0ZWRFcnJvcihmYWxzZSlcbiAgICAgICAgICAgICAgc2V0VmFsdWUodmFsdWVzLCBpbml0aWFsKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICApXG4gICAgICB9fVxuICAgIDwvRm9ybUlucHV0PlxuICApXG59XG4iXX0=